/***************************************************************************************************
**    Copyright (C) 2015-2024 HMS Technology Center Ravensburg GmbH, all rights reserved
****************************************************************************************************
**
**        File: HALCSmsg_cfg.h
**     Summary: Configuration header of HALCS for non-safe message handling.
**   $Revision: 4393 $
**       $Date: 2024-04-22 15:59:26 +0200 (Mo, 22 Apr 2024) $
**      Author: KlAn
** Responsible: (optional)
**
****************************************************************************************************
****************************************************************************************************
**
**  Functions: -
**
**    History: -
**
****************************************************************************************************
**    Template Version 5
***************************************************************************************************/

#ifndef HALCSMSG_CFG_H
#define HALCSMSG_CFG_H

/***************************************************************************************************
**    constants and macros
***************************************************************************************************/

/** HALCSMSG_cfg_RCQ_SIZE
** Number of Queue Entries of the "Request Command Queue"
** Queue entries are occupied by HALC Commands: CSOS_k_CMD_IXSSO_DEV_STATE,
** CSOS_k_CMD_IXSSO_SNN, CSOS_k_CMD_IXSSC_TERMINATE, CSOS_k_CMD_IXSMR_EXPL_RES,
** CSOS_k_CMD_IXSCE_SOPEN_RES, CSOS_k_CMD_IXSCE_SCLOSE_RES and
** CSOS_k_CMD_IXSCE_CNXN_CLOSE via HALCS_TxDataPut().
** Furthermore by calling HALCS_ModStatLedSet(), HALCS_NetStatLedSet() and
** HALCS_MsgTxReqSafetyReset().
** Scenario with most queue entries occupied: 2 sequential Type 1 SafetyOpens. Each request not only
** causes a response to be sent, but also Safety Supervisor state changes and changes of the MS and
** NS LEDs. Additionally for the second SafetyOpen the existing connection will be closed and a
** transition to the Configuring state will be performed. This scenario results in occupation of 12
** queue entries.
*/
#define HALCSMSG_cfg_RCQ_SIZE                16u

/** HALCSMSG_cfg_REQ_PAYLOAD_SIZE:
** Payload of request data storable in one single queue entry (in octets) 
** The buffer shall be big enough to hold all HALC Commands generated by the CSS. Since the max.
** length of the HALC command 'CSOS_k_CMD_IXSMR_EXPL_RES' also depends on 
** CSOS_k_EXPL_RESP_HDR_MAX_SIZE, this value shall also be considered here.
** Max. payload length of  
** CSOS_k_CMD_IXSSO_DEV_STATE    = 0 Bytes (see EIP Porting Guide)
** CSOS_k_CMD_IXSSO_SNN          = 6 Bytes (see EIP Porting Guide)       
** CSOS_k_CMD_IXSSC_TERMINATE    = 0 (see EIP Porting Guide)
** CSOS_k_CMD_IXSMR_EXPL_RES     = 40 Bytes (see CSOS_cfg_EXPL_RSP_DATA_BUF_SIZE + 
**                                           CSOS_k_EXPL_RESP_HDR_MAX_SIZE                   
** CSOS_k_CMD_IXSCE_SOPEN_RES    = 50 bytes (see EIP Porting Guide)
** CSOS_k_CMD_IXSCE_SCLOSE_RES   = 18 Bytes (see k_FWD_CLOSE_SUCREP_SIZE_B, 
**                                           k_FWD_CLOSE_ERRREP_SIZE_B)
** CSOS_k_CMD_IXSCE_CNXN_CLOSE   = 1 Byte (see EIP Porting Guide)       
*/
#define HALCSMSG_cfg_REQ_PAYLOAD_SIZE      50u

/***************************************************************************************************
**    data types
***************************************************************************************************/


/***************************************************************************************************
**    global variables
***************************************************************************************************/


/***************************************************************************************************
**    function prototypes
***************************************************************************************************/

#endif

