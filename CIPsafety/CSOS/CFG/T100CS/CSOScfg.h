/*******************************************************************************
**    Copyright (C) 2009-2020 HMS Technology Center Ravensburg GmbH
********************************************************************************
**
**   Workfile: CSOScfg.h
**    Summary: CSOS configuration
**             CSOScfg.h contains all common configuration settings of the CIP
**             Safety Stack and CIP Safety Adaptation Layer. All configurable
**             macros, definitions and constants must contain a _cfg_ in their
**             names (see Req.10.5.1.4-1) and must be preceded by a comment
**             containing a detailed description (see Req.10.5.1.4-4) and
**             valid values/ranges (see Req.10.5.1.4-5).
**             **Attention:**
**             The application and all stack modules must include CSOScfg.h as
**             the first header file.
**
**     Author: A.Kramer
**
********************************************************************************
********************************************************************************
**
**  Functions: -
**
********************************************************************************
**    Template Version 3
*******************************************************************************/


#ifndef CSOS_CFG_H
#define CSOS_CFG_H


/*******************************************************************************
**    Identification
*******************************************************************************/

/** CSOS_k_CONFIGURATION_STRING:
    This symbol represents the CSOS Stack configuration as a string.
*/
#define CSOS_k_CONFIGURATION_STRING  "IXXAT Safe T100 CS"


/*******************************************************************************
**    CSOS constants
********************************************************************************
**    The defines in this section shall NOT be modified!
*******************************************************************************/

/** CSOS_k_ENABLE:
    This define is used in later definitions to enable features of the CSOS
    stack.
    This bit pattern was chosen to be able to detect a single bit error.
*/
#define CSOS_k_ENABLE                0x00FFU


/** CSOS_k_DISABLE:
    This define is used in later definitions to disable features of the CSOS
    stack.
    This bit pattern was chosen to be able to detect a single bit error.
*/
#define CSOS_k_DISABLE               0x0000U


/** CSOS_k_NOT_APPLICABLE:
    This symbol is used for the definition of the defines that are not
    applicable. The value of this define must be outside of the allowed
    value range of all configuration defines.
*/
#define CSOS_k_NOT_APPLICABLE        0xFFFFFFFFU


/*******************************************************************************
**    CSOS configuration settings
********************************************************************************
**    The following defines shall be set only to the allowed values!
*******************************************************************************/

/** CSOS_cfg_EXPL_RSP_DATA_BUF_SIZE:
    This define determines the maximum data size (payload) of an explicit
    response message. This doesn't consider the Message Router Response Format
    header (see CSOS_k_EXPL_RESP_HDR_MAX_SIZE). Therefore the HALCS buffers for
    explicit response data must be at least
    CSOS_cfg_EXPL_RSP_DATA_BUF_SIZE + CSOS_k_EXPL_RESP_HDR_MAX_SIZE.

    Allowed values:
    ::
      The size required is determined by the maximum of the following terms:
      - 31  (Safety Validator Object Instance Attribute "Time Coordination
        Message Min Multiplier")
      - maximum response length generated by Objects implemented in the Safety
        Application (SAPL_IxsmrObjReqClbk())
      - if (CSOS_cfg_NUM_OF_SAFETY_PORTS > 2) then the response length of the
        Safety Supervisor Object Attribute Target UNID List attribute:
        1 + (CSOS_cfg_NUM_OF_SAFETY_PORTS * 12)
      - if (CSOS_cfg_TARGET == CSOS_k_ENABLE) then the response length of the
        Safety Supervisor Object OCPUNID attribute
        (see k_OCP_OWNERS_ATTRIB_SIZE):
          if (CSS_cfg_NUM_OF_T_ASM_OUT_INSTS != CSS_k_NOT_APPLICABLE) then
            2 + (16 * CSS_cfg_NUM_OF_T_ASM_OUT_INSTS)
          else
            2 + (16 * CSS_cfg_NUM_OF_ASM_OUT_INSTS)
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_ENABLE) then consider the length of
        the following CCO instance Get_Attribute_Single responses
          - Attribute 13 Safety Parameters: 46
          - Attribute 6 Connection Path:
               2 + (2 * (CSOS_cfg_CCO_CNXN_RPATH_MAX_LEN_W +
                         CSOS_cfg_CCO_CNXN_TPATH_MAX_LEN_W))
          - Attribute 8 Connection Name:
               2 + (2 * CSS_cfg_CCO_CNXN_NAME_MAX_LEN_W)
    _
*/
#define CSOS_cfg_EXPL_RSP_DATA_BUF_SIZE    34U


/** CSOS_cfg_ADD_STAT_SIZE_MAX:
    This configuration define determines the maximum number of Additional Status
    Words that can be returned with an Explicit Message Response. Objects
    implemented in CSS only produce 1 Additional Status Word. But for the
    objects implemented by the user of the stack we give the option to return
    more Additional Status Words.

    Allowed values: 1..255
*/
#define CSOS_cfg_ADD_STAT_SIZE_MAX         1U


/** CSOS_cfg_ORIGINATOR:
    This switch determines if the device supports Connection Originator
    functionality (see Req.5.2-4).

    Allowed values: CSOS_k_ENABLE or CSOS_k_DISABLE
(see [SRS_2069])
*/
#define CSOS_cfg_ORIGINATOR                CSOS_k_DISABLE


/** CSOS_cfg_TARGET:
    This switch determines if the device supports Connection Target
    functionality (see Req.5.2-9).

    Allowed values: CSOS_k_ENABLE or CSOS_k_DISABLE
(see [SRS_2069])
*/
#define CSOS_cfg_TARGET                    CSOS_k_ENABLE


/** CSOS_cfg_SHORT_FORMAT:
    This switch determines if the CSOS stack supports the 1 or 2 Byte Data Size
    messages (see Req.5.3-10).

    Allowed values: CSOS_k_ENABLE or CSOS_k_DISABLE

    At least one of Short or Long Format must be supported.
(see [SRS_2051], [SRS_2063])
*/
#define CSOS_cfg_SHORT_FORMAT              CSOS_k_DISABLE


/** CSOS_cfg_LONG_FORMAT:
    This switch determines if the CSOS stack supports the 3 to 250 Byte Data
    Size messages (see Req.5.3-5).

    Allowed values: CSOS_k_ENABLE or CSOS_k_DISABLE

    At least one of Short or Long Format must be supported.
(see [SRS_2051], [SRS_2063])
*/
#define CSOS_cfg_LONG_FORMAT               CSOS_k_ENABLE


/** CSOS_cfg_LONG_FORMAT_MAX_LENGTH:
    This configuration define allows to limit the maximum length of 3 to 250
    Byte messages.

    Allowed values:
    ::
      - if (CSOS_cfg_LONG_FORMAT == CSOS_k_ENABLE) then 3..250
      - if (CSOS_cfg_LONG_FORMAT == CSOS_k_DISABLE) then CSOS_k_NOT_APPLICABLE
    _
(see [SRS_2051], [SRS_2063])
*/
#define CSOS_cfg_LONG_FORMAT_MAX_LENGTH    3U


/** CSOS_cfg_NUM_OF_SV_CLIENTS:
    This configuration define determines how many Safety Validator Client
    Instances are supported. Safety Validator Client Instances are used for
    safety data production. If this define is set to zero this means that the
    device cannot produce safety data (e.g. the device has no inputs).

    Allowed values: 0..65534  (but the sum of CSOS_cfg_NUM_OF_SV_CLIENTS and
    CSOS_cfg_NUM_OF_SV_SERVERS may also not exceed 65534)
(see [SRS_2072])
*/
#define CSOS_cfg_NUM_OF_SV_CLIENTS         1U


/** CSOS_cfg_NUM_OF_SV_SERVERS:
    This configuration define determines how many Safety Validator Server
    Instances are supported. Safety Validator Server Instances are used for
    safety data consumption. If this define is set to zero this means that the
    device cannot consume safety data (e.g. the device has no outputs).

    Allowed values: 0..65534  (but the sum of CSOS_cfg_NUM_OF_SV_CLIENTS and
    CSOS_cfg_NUM_OF_SV_SERVERS may also not exceed 65534)
(see [SRS_2072])
*/
#define CSOS_cfg_NUM_OF_SV_SERVERS         1U


/** CSOS_cfg_CCO_CNXN_RPATH_MAX_LEN_W:
    This configuration define determines for the Originator the maximum length
    of the routing part of the connection path that can be stored in the
    Connection Configuration Object (number of 16-bit words). In this
    implementation the Connection Path is subdivided into 2 parts: Route Path
    and Target Path. The sum of CSOS_cfg_CCO_CNXN_RPATH_MAX_LEN_W and
    CSOS_cfg_CCO_CNXN_TPATH_MAX_LEN_W is the maximum connection path length that
    can be sent in a Forward_Open.

    Allowed values:
    ::
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_ENABLE) then 1..125
        but (CSOS_cfg_CCO_CNXN_RPATH_MAX_LEN_W +
        CSOS_cfg_CCO_CNXN_TPATH_MAX_LEN_W) must be <= 126
      - else                                      CSOS_k_NOT_APPLICABLE
    _
*/
#define CSOS_cfg_CCO_CNXN_RPATH_MAX_LEN_W  CSOS_k_NOT_APPLICABLE


/** CSOS_cfg_CCO_CNXN_TPATH_MAX_LEN_W:
    This configuration define determines for the Originator the maximum length
    of the target part of the connection path that can be stored in the
    Connection Configuration Object (number of 16-bit words). In this
    implementation the Connection Path is subdivided into 2 parts: Route Path
    and Target Path. The sum of CSOS_cfg_CCO_CNXN_RPATH_MAX_LEN_W and
    CSOS_cfg_CCO_CNXN_TPATH_MAX_LEN_W is the maximum connection path length that
    can be sent in a Forward_Open.

    Allowed values:
    ::
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_ENABLE) then 1..125
        but (CSOS_cfg_CCO_CNXN_RPATH_MAX_LEN_W +
        CSOS_cfg_CCO_CNXN_TPATH_MAX_LEN_W) must be <= 126
      - else                                      CSOS_k_NOT_APPLICABLE
    _
*/
#define CSOS_cfg_CCO_CNXN_TPATH_MAX_LEN_W  CSOS_k_NOT_APPLICABLE


/** CSOS_cfg_NUM_OF_SAFETY_PORTS:
    This configuration define determines the number of Safety Ports supported by
    the device. Default is 1 (Single Safety Port Device). If more than 1 Safety
    Port is supported (Multiple Safety Port Device) (see Req.5.3-19) then in the
    Safety Supervisor Object Attribute 30 and 31 are supported instead of 27 and
    29 (Target UNID List and Proposed TUNID List instead of Target UNID and
    Proposed TUNID). The same applies to the Services Propose_TUNID_List and
    Apply_TUNID_List instead of Propose_TUNID and Apply_TUNID (if
    CSS_cfg_SET_TUNID == CSS_k_ENABLE).

    For each port of a Multiple Safety Port Device a Port Number and a Node ID
    must be assigned in IXSSC_Init(). If this Node ID is 0xFFFFFFFFU then
    this port is unconfigured and cannot be used for CIP Safety. If a port has
    a valid Node ID then its usage for CIP Safety can still be prevented by
    assigning a TUNID of all 0xFF to this port.

    Allowed values:
    ::
      1..254
(see [SRS_2248])    
*/
#define CSOS_cfg_NUM_OF_SAFETY_PORTS       1U


#endif /* CSOS_CFG_H */

/*** End of File ***/


