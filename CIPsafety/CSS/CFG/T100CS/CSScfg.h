/*******************************************************************************
**    Copyright (C) 2009-2022 HMS Technology Center Ravensburg GmbH
********************************************************************************
**
**   Workfile: CSScfg.h
**    Summary: CSS configuration
**             CSScfg.h contains all configuration settings of the CIP
**             Safety Stack. All configurable
**             macros, definitions and constants must contain a _cfg_ in their
**             names (see Req.10.5.1.4-1) and must be preceded by a comment
**             containing a detailed description (see Req.10.5.1.4-4) and
**             valid values/ranges (see Req.10.5.1.4-5).
**             **Attention:**
**             The safety application and all CIP Safety Stack modules must
**             include CSScfg.h as the first header file.
**
**     Author: A.Kramer
**
********************************************************************************
********************************************************************************
**
**  Functions: -
**
********************************************************************************
**    Template Version 3
*******************************************************************************/


#ifndef CSS_CFG_H
#define CSS_CFG_H


/*******************************************************************************
**    Identification
*******************************************************************************/

/** CSS_k_CONFIGURATION_STRING:
    This symbol represents the CSS Stack configuration as a string.
*/
#define CSS_k_CONFIGURATION_STRING  "IXXAT Safe T100 CS"


/*******************************************************************************
**    CSS constants
********************************************************************************
**    The following defines shall NOT be modified!
*******************************************************************************/

/** CSS_k_ENABLE:
    This define is used in later definitions to enable features of the CSS
    stack.
    This bit pattern was chosen to be able to detect a single bit error.
*/
#define CSS_k_ENABLE                0x00FFU


/** CSS_k_DISABLE:
    This define is used in later definitions to disable features of the CSS
    stack.
    This bit pattern was chosen to be able to detect a single bit error.
*/
#define CSS_k_DISABLE               0x0000U


/** CSS_k_NOT_APPLICABLE:
    This symbol is used for the definition of the defines that are not
    applicable. The value of this define must be outside of the allowed
    value range of all configuration defines.
*/
#define CSS_k_NOT_APPLICABLE        0xFFFFFFFFU


/** CSS_H2N_CPY_MTD_xxx:

    These defines are used to select one of the methods for copying the transmit
    data from host processor format to network format and considering that the
    data generated by Safety Controller 1 and Safety Controller 2 must be mixed.
    Mixing is required for the HALC commands CSOS_k_CMD_IXSVO_IO_DATA,
    CSOS_k_CMD_IXCCO_SOPEN1_REQ and CSOS_k_CMD_IXCCO_SOPEN2_REQ. The way how the
    bytes are arranged and how they have to be mixed is dependent on
    {CSS_cfg_H2N_COPY_METHOD}.

    The example below shows how a message which is 10 bytes long
    (B0, B1 ... B9) is encoded in the different copy methods:

    CSS_H2N_CPY_MTD_ODD_EVEN_SORT:
    - B9 B7 B5 B3 B1 B0 B2 B4 B6 B8

    CSS_H2N_CPY_MTD_INTERLACE_EVEN:
    - B0 0 B2 0 B4 0 B6 0 B8 0

    CSS_H2N_CPY_MTD_INTERLACE_ODD:
    - 0 B1 0 B3 0 B5 0 B7 0 B9

    CSS_H2N_CPY_MTD_HOMOGENEOUS_MIX:
    Same mixing as CSS_H2N_CPY_MTD_INTERLACE_EVEN/CSS_H2N_CPY_MTD_INTERLACE_ODD,
    but with homogeneous software. This means that even and odd (i.e. Safety
    Controller 1 and Safety Controller 2) is determined at runtime by calling
    the callback function {SAPL_CssProduceEvenBytesClbk()}.
*/
#define CSS_H2N_CPY_MTD_ODD_EVEN_SORT   1
#define CSS_H2N_CPY_MTD_INTERLACE_EVEN  2
#define CSS_H2N_CPY_MTD_INTERLACE_ODD   3
#define CSS_H2N_CPY_MTD_HOMOGENEOUS_MIX 4


/** CSS_SOFT_ERR_MTD_xxx:
    These defines are used to select one of the methods for Soft error
    detection:

    - CSS_SOFT_ERR_MTD_OFF:  Soft error detection is switched off
    - CSS_SOFT_ERR_MTD_BYTES: The static data of CSS is returned on byte level.
      With this method IXSSC_SoftErrByteGet() does not deal with endianness or
      alignment/ padding issues of the processor. Thus this method is usable and
      efficient when both Safety Controllers are identical.
    - CSS_SOFT_ERR_MTD_VARIABLES: The static data of CSS is returned on variable
      level. With this method IXSSC_SoftErrVarGet() converts all stack internal
      variables to network byte order (little endian). Only pure variable data
      is returned i.g. padding bytes are left out.
*/
#define CSS_SOFT_ERR_MTD_OFF            1
#define CSS_SOFT_ERR_MTD_BYTES          2
#define CSS_SOFT_ERR_MTD_VARIABLES      3


/*******************************************************************************
**    CSS configuration settings
********************************************************************************
**    The following defines shall be set only to the allowed values!
*******************************************************************************/

/** CSS_cfg_ERROR_STRING:
    This switch determines if the Error String feature is supported by the
    stack. If this define is set the application can request a textual
    description to each error code. This feature is optional and is not
    safety relevant!

    Allowed values: CSS_k_ENABLE or CSS_k_DISABLE
*/
#define CSS_cfg_ERROR_STRING                 CSS_k_DISABLE


/** CSS_cfg_BASE_FORMAT:
    This switch determines if the CSOS stack supports the CIP Safety Base
    Format (see Req.5.3-12). The Base Format is deprecated from CIP Safety.
    Originators can optionally support the Base Format for backward
    compatibility. Target-only devices which have not deprecated the Base 
    Format will not be able to obtain a new Declaration of Conformity from ODVA.

    Allowed values: CSS_k_ENABLE or CSS_k_DISABLE
*/
#define CSS_cfg_BASE_FORMAT                  CSS_k_DISABLE


/** CSS_cfg_EXTENDED_FORMAT:
    This switch determines if the CSOS stack supports the CIP Safety Extended
    Format (see Req.5.3-7 and Req.5.3-12). The Extended Format is required in
    edition 2.5 of the CIP Networks Library.

    Allowed values: CSS_k_ENABLE
*/
#define CSS_cfg_EXTENDED_FORMAT              CSS_k_ENABLE


/** CSS_cfg_IO_ASM_LOOKUP_TABLE:
    This switch determines if the CSOS stack uses an optimized method to obtain
    the internal index of an assembly instance from its instance ID. By enabling
    this switch a lookup table is generated. Otherwise a linear search is used.
    To limit the size of the look up tables the maximum Instance ID of
    assemblies is then limited to 255.

    Allowed values: CSS_k_ENABLE or CSS_k_DISABLE
*/
#define CSS_cfg_IO_ASM_LOOKUP_TABLE          CSS_k_DISABLE


/** CSS_cfg_NUM_OF_ASM_IN_INSTS:
    This configuration define determines how many Input Assembly Instances are
    supported.

    Allowed values:
    ::
      - if (    (CSOS_cfg_NUM_OF_SV_CLIENTS > 0U)
             && (    (CSS_cfg_ORIGINATOR_PROCESS_IMAGE == CSS_k_DISABLE)
                  || (CSOS_cfg_TARGET == CSOS_k_ENABLE)
                )
           ) then 1..MAX_ASM_INST_NUM
      - else  CSS_k_NOT_APPLICABLE
      - if (CSOS_cfg_TARGET == CSOS_k_ENABLE) then at least one of
            CSS_cfg_NUM_OF_ASM_IN_INSTS or CSS_cfg_NUM_OF_ASM_OUT_INSTS must be
            != CSS_k_NOT_APPLICABLE
      with MAX_ASM_INST_NUM:
        - if (CSS_cfg_IO_ASM_LOOKUP_TABLE == CSS_k_ENABLE) then 255
        - else 65534
    _
(see [3.3-3:]
*/
#define CSS_cfg_NUM_OF_ASM_IN_INSTS          CSOS_cfg_NUM_OF_SV_CLIENTS


/** CSS_cfg_NUM_OF_ASM_OUT_INSTS:
    This configuration define determines how many Output Assembly Instances are
    supported.

    Allowed values:
    ::
      - if (    (CSOS_cfg_NUM_OF_SV_SERVERS > 0U)
             && (CSS_cfg_ORIGINATOR_PROCESS_IMAGE == CSS_k_DISABLE)
           ) then CSOS_cfg_NUM_OF_SV_SERVERS..MAX_ASM_INST_NUM
      - else if (    (CSOS_cfg_NUM_OF_SV_SERVERS > 0U)
                  && (CSOS_cfg_TARGET == CSOS_k_ENABLE)
                ) then 1..MAX_ASM_INST_NUM
      - else  CSS_k_NOT_APPLICABLE
      - if (CSOS_cfg_TARGET == CSOS_k_ENABLE) then at least one of
            CSS_cfg_NUM_OF_ASM_IN_INSTS or CSS_cfg_NUM_OF_ASM_OUT_INSTS must be
            != CSS_k_NOT_APPLICABLE
      with MAX_ASM_INST_NUM:
        - if (CSS_cfg_IO_ASM_LOOKUP_TABLE == CSS_k_ENABLE) then 255
        - else 65534
    _
(see [3.3-7:]
*/
#define CSS_cfg_NUM_OF_ASM_OUT_INSTS         CSOS_cfg_NUM_OF_SV_SERVERS


/** CSS_cfg_NUM_OF_T_ASM_OUT_INSTS:
    This configuration define determines how many of the Output Assembly
    Instances (CSS_cfg_NUM_OF_ASM_OUT_INSTS) are used for connections for which
    this device is the Target.

    Allowed values:
    ::
      - if (    (CSOS_cfg_ORIGINATOR == CSOS_k_ENABLE)
             && (CSOS_cfg_TARGET == CSOS_k_ENABLE)
             && (CSS_cfg_ORIGINATOR_PROCESS_IMAGE == CSS_k_DISABLE)
           )
         then 0..CSS_cfg_NUM_OF_ASM_OUT_INSTS
      - else CSS_k_NOT_APPLICABLE
    _
*/
#define CSS_cfg_NUM_OF_T_ASM_OUT_INSTS       CSS_k_NOT_APPLICABLE


/** CSS_cfg_ASM_NULL_INST_ID:
    Device-defined reserved NULL instance of the Assembly object. Needed as an
    Application path in SafetyOpen requests for reference of Time Coordination
    and configuration (where no configuration is transmitted) and as
    configuration path when the SafetyOpen doesn't refer to a particular
    configuration.

    Allowed values: 1..0xFFFE
*/
#define CSS_cfg_ASM_NULL_INST_ID             199U


/** CSS_cfg_SET_TUNID:
    This switch determines if the device supports the Safety Supervisor Object
    services Propose_TUNID and Apply_TUNID (for Single Safety Port Devices)
    or Propose_TUNID_List and Apply_TUNID_List (for Multiple Safety Port
    Devices, see CSOS_cfg_NUM_OF_SAFETY_PORTS).

    Allowed values: CSS_k_ENABLE or CSS_k_DISABLE
(see [SRS_2122])
*/
#define CSS_cfg_SET_TUNID                    CSS_k_ENABLE


/** CSS_cfg_NUM_OF_CCO_INSTS:
    This configuration define determines how many Connection Configuration
    Object instances are supported.
    Each CCO instance needs a Safety Validator Client or Server Instance. Thus
    the sum of supported Safety Validator Client and Server instances
    (CSOS_cfg_NUM_OF_SV_CLIENTS + CSOS_cfg_NUM_OF_SV_SERVERS) should be equal
    or greater than CSS_cfg_NUM_OF_CCO_INSTS (in case
    CSOS_cfg_TARGET == CSOS_k_ENABLE).

    Example:
    -  CSS_cfg_NUM_OF_CCO_INSTS = 10
    -  CSOS_cfg_NUM_OF_SV_CLIENTS = 8
    -  CSOS_cfg_NUM_OF_SV_SERVERS = 8
    The device can originate up to 10 connections. Of these 10 connections there
    can be up to 8 producing and/or up to 8 consuming connections (but the
    number of originated connections is limited to 10). E.g. there could be 4
    Clients and 6 Servers at the same time. Depending on the usage of the
    Clients and Servers 6 connections will remain unused (or are available for
    Target connections if supported (CSOS_cfg_TARGET == CSOS_k_ENABLE)).

    Allowed values:
    ::
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_ENABLE) then 1..65533
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_DISABLE) then CSS_k_NOT_APPLICABLE
    _
*/
#define CSS_cfg_NUM_OF_CCO_INSTS             CSS_k_NOT_APPLICABLE


/** CSS_cfg_ORIGINATOR_PROCESS_IMAGE:
    This switch determines if the Originator exchanges its data via process
    images or if Assembly Objects are used.

    Allowed values:
    ::
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_ENABLE) then CSS_k_ENABLE or
        CSS_k_DISABLE
      - else                                      CSS_k_DISABLE
    _
*/
#define CSS_cfg_ORIGINATOR_PROCESS_IMAGE     CSS_k_DISABLE


/** CSS_cfg_CCO_CNXN_NAME_MAX_LEN_W:
    This configuration define determines for the Originator the maximum length
    of the connection name that can be stored in the Connection Configuration
    Object (number of 16-bit UNICODE characters).

    Allowed values:
    ::
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_ENABLE) then 1..126
      - else                                      CSS_k_NOT_APPLICABLE
    _
*/
#define CSS_cfg_CCO_CNXN_NAME_MAX_LEN_W      CSS_k_NOT_APPLICABLE


/** CSS_cfg_H2N_COPY_METHOD:
    This configuration define determines how the safety relevant transmit data
    is copied from CSS to HALCS. See the definition of the {CSS_H2N_CPY_MTD_xxx}
    for the description of the allowed values.

    Allowed values:
    ::
      - CSS_H2N_CPY_MTD_ODD_EVEN_SORT
      - CSS_H2N_CPY_MTD_INTERLACE_EVEN
      - CSS_H2N_CPY_MTD_INTERLACE_ODD
      - CSS_H2N_CPY_MTD_HOMOGENEOUS_MIX
(see [SRS_2028])
*/
#define CSS_cfg_H2N_COPY_METHOD              CSS_H2N_CPY_MTD_HOMOGENEOUS_MIX


/** CSS_cfg_SOFT_ERR_METHOD:
    This configuration define determines which method for obtaining the static
    stack data used for soft error detection is used. See the definition of
    {CSS_SOFT_ERR_MTD_xxx} for the description of the allowed values. Note that
    CSS_SOFT_ERR_MTD_BYTES should be considered deprecated and support is for
    legacy applications only. For new implementations it is recommended to use
    CSS_SOFT_ERR_MTD_VARIABLES.

    Allowed values:
    ::
      - CSS_SOFT_ERR_MTD_OFF
      - CSS_SOFT_ERR_MTD_BYTES       (deprecated)
      - CSS_SOFT_ERR_MTD_VARIABLES
*/
#define CSS_cfg_SOFT_ERR_METHOD              CSS_SOFT_ERR_MTD_BYTES


/** CSS_cfg_SOFT_ERR_MEM_CHUNK_SIZE:
    This configuration define determines how many bytes are returned in the
    function {IXSSC_SoftErrByteGet()}/{IXSSC_SoftErrVarGet()} for Soft Error
    checking. See the function header of IXSSC_SoftErrByteGet()/
    IXSSC_SoftErrVarGet() for a description of how this function is to be used.

    Allowed values:
    ::
      - if (CSS_cfg_SOFT_ERR_METHOD == CSS_SOFT_ERR_MTD_OFF) then
           CSS_k_NOT_APPLICABLE
      - if (CSS_cfg_SOFT_ERR_METHOD == CSS_SOFT_ERR_MTD_BYTES) then 1..65535
      - if (CSS_cfg_SOFT_ERR_METHOD == CSS_SOFT_ERR_MTD_VARIABLES) then 4..65535
*/
#define CSS_cfg_SOFT_ERR_MEM_CHUNK_SIZE      1


/** CSS_cfg_CCO_CLASS_ID:
    This configuration define determines the CIP Class ID of the Connection
    Configuration Object. According to the CIP Networks Library the Class ID of
    the CCO is 0xF3 (243). But as this implementation of the CCO doesn't
    completely implement all required services it is recommended to choose a
    Class Id from the vendor specific range. This also avoids problems with
    conformance testing.
    Vendor specific Class ID ranges are 100(0x64) to 199(0xC7) and 768(0x300) to
    1279(0x4FF).

    Allowed values:
    ::
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_ENABLE) then
           100..199 or 243 or 768..1279
      - if (CSOS_cfg_ORIGINATOR == CSOS_k_DISABLE) then CSS_k_NOT_APPLICABLE
*/
#define CSS_cfg_CCO_CLASS_ID                 CSS_k_NOT_APPLICABLE


/** CSS_cfg_SAFETY_RESET:
    This configuration define determines if the Safety_Reset service of the
    Safety Supervisor Object is supported. In cases where the CIP Specifications
    declare the support of Safety_Reset optional it may be deactivated.

    Allowed values: CSS_k_ENABLE or CSS_k_DISABLE
*/
#define CSS_cfg_SAFETY_RESET                 CSS_k_ENABLE


/** CSS_cfg_ALARM_WARNING_ENABLE:
    This configuration define determines if the Alarm Enable and Warning Enable
    Attribute of the Safety Supervisor Object is supported. In cases where the
    CIP Specifications declare the support of these attributes optional it may
    be deactivated.

    Allowed values: CSS_k_ENABLE or CSS_k_DISABLE
*/
#define CSS_cfg_ALARM_WARNING_ENABLE         CSS_k_ENABLE


#endif /* CSS_CFG_H */

/*** End of File ***/


